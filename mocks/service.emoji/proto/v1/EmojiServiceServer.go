// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	v1 "gmm/service.emoji/proto/v1"
)

// EmojiServiceServer is an autogenerated mock type for the EmojiServiceServer type
type EmojiServiceServer struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *EmojiServiceServer) Create(_a0 context.Context, _a1 *v1.CreateRequest) (*v1.CreateResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1.CreateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v1.CreateRequest) *v1.CreateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.CreateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1.CreateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *EmojiServiceServer) Delete(_a0 context.Context, _a1 *v1.DeleteRequest) (*v1.DeleteResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1.DeleteResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v1.DeleteRequest) *v1.DeleteResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.DeleteResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1.DeleteRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: _a0, _a1
func (_m *EmojiServiceServer) FindById(_a0 context.Context, _a1 *v1.FindByIdRequest) (*v1.FindByIdResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1.FindByIdResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v1.FindByIdRequest) *v1.FindByIdResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.FindByIdResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1.FindByIdRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: _a0, _a1
func (_m *EmojiServiceServer) List(_a0 context.Context, _a1 *v1.ListRequest) (*v1.ListResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1.ListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ListRequest) *v1.ListResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1.ListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedEmojiServiceServer provides a mock function with given fields:
func (_m *EmojiServiceServer) mustEmbedUnimplementedEmojiServiceServer() {
	_m.Called()
}
