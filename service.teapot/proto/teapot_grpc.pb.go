// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package teapotv1pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TeapotClient is the client API for Teapot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeapotClient interface {
	GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetByIdResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
}

type teapotClient struct {
	cc grpc.ClientConnInterface
}

func NewTeapotClient(cc grpc.ClientConnInterface) TeapotClient {
	return &teapotClient{cc}
}

func (c *teapotClient) GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetByIdResponse, error) {
	out := new(GetByIdResponse)
	err := c.cc.Invoke(ctx, "/euterpe.teapot.v1.teapot/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teapotClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/euterpe.teapot.v1.teapot/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeapotServer is the server API for Teapot service.
// All implementations must embed UnimplementedTeapotServer
// for forward compatibility
type TeapotServer interface {
	GetById(context.Context, *GetByIdRequest) (*GetByIdResponse, error)
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	mustEmbedUnimplementedTeapotServer()
}

// UnimplementedTeapotServer must be embedded to have forward compatible implementations.
type UnimplementedTeapotServer struct {
}

func (UnimplementedTeapotServer) GetById(context.Context, *GetByIdRequest) (*GetByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedTeapotServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTeapotServer) mustEmbedUnimplementedTeapotServer() {}

// UnsafeTeapotServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeapotServer will
// result in compilation errors.
type UnsafeTeapotServer interface {
	mustEmbedUnimplementedTeapotServer()
}

func RegisterTeapotServer(s grpc.ServiceRegistrar, srv TeapotServer) {
	s.RegisterService(&_Teapot_serviceDesc, srv)
}

func _Teapot_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeapotServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/euterpe.teapot.v1.teapot/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeapotServer).GetById(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teapot_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeapotServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/euterpe.teapot.v1.teapot/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeapotServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Teapot_serviceDesc = grpc.ServiceDesc{
	ServiceName: "euterpe.teapot.v1.teapot",
	HandlerType: (*TeapotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetById",
			Handler:    _Teapot_GetById_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Teapot_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.teapot/proto/teapot.proto",
}
